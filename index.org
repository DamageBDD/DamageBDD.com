#+TITLE: DamageBDD - Behavior verification at planet scale.


#+INCLUDE: "header.org"


#+BEGIN_COMMENT
: make a compelling argument why damagebdd is a powerful definitive unique tool and its potential bbusinesss usecases and revenue streams
#+END_COMMENT



#+BEGIN_EXPORT html
<section id="page1">
#+END_EXPORT

DamageBDD is a platform that unlocks the cross functional
collaborative power of [[https://en.wikipedia.org/wiki/Behavior-driven_development][BDD]] (Behaviour Driven Development) within your
organization.

DamageBDD allows humans to define software behaviour in the human-readable
Gherkin syntax. Unlike other testing systems that require a deep
understanding of testing tools, DamageBDD enables any one to define
expected software behavior in plain language. This makes it easy for teams with
varying levels of technical and communication skills to collaborate
effectively towards building high quality software products.

#+BEGIN_EXPORT html

<div style="border: 1px solid #333; padding: 10px; margin: 10px 0; background-color: #f9f9f9;">
  <strong>

Try now!
</strong>
<br>
 No login or payment required for single test runs.
<br>

Use <a href='https://curl.se'>Curl</a> to download and run a sample bdd feature.
<br>
Please read <a href="tac.html">Terms & Conditions</a> before use.
<br>
For step documentation and help please refer to the <a href="manual.html">manual.</a>
<br>
For pricing and services please refer to <a href="pricing.html">pricing</a>
</div>

<pre>
<code class="language-bash">
# download sample bdd
curl -o jsontest.feature \
    https://run.damagebdd.com/features/jsontest.feature
cat jsontest.feature

# run bdd
curl -s -N --data-binary @jsontest.feature \
    -H "Authorization: guest" \
    'https://run.damagebdd.com/execute_feature'
</code>
</pre>
#+END_EXPORT

Find more feature files [[https://github.com/jagguli/DamageBDD/tree/master/features][here]].

Execute test from browser https://run.damagebdd.com 


#+BEGIN_EXPORT html
</section>
#+END_EXPORT
In addition to BDD based functionality verification, DamageBDD can
also be used to test the performance and scalability of target
systems. With its ability to handle large-scale load testing,
DamageBDD can identify potential bottlenecks, stress test systems
under realistic conditions, and help organization ensure that their
applications can handle high user traffic.

Furthermore, DamageBDD can also be utilized for continuous integration
and deployment pipelines. It can be integrated into existing CI/CD
workflows, allowing automated load testing to be performed as part of
the software development process. This ensures that the performance of
applications is constantly monitored and issues are identified early
on, reducing the risk of potential performance problems in production.

DamageBDD is a powerful tool for organizations looking to improve their
testing processes and ensure the performance and scalability of their
applications.
  
*How does it work?*

Consider the simple test case below, It contains a `Feature` with
one `Scenario' which is to test that the server configured responds
with a json containing the value "ok" in the response

When this is published to the DamageBDD service, DamageBDD runners
will execute the test case at the scale configured for the run.

#+BEGIN_EXPORT html
<pre>
<code class="language-gherkin">
Feature: Test echo json functionality of JsonTest.com using HTTP API

  Scenario: GET request to JsonTest.com
    Given I am using server "http://echo.jsontest.com"
    When I make a GET request to "/key/value/one/two"
    Then the json at path "$.one" must be "one"
    </code>
</pre>
#+END_EXPORT

Other load testing systems operate at a protocol or message level and
usually requires someone with intimate understanding of load testing
tools, whereas DamageBDD test cases are human readable Behaviour
Driven Tests.

* Features

Currently DamageBDD is in early stage of development, most of the
features listed below are in active development.

- HTTP/REST API for submitting features for execution with simple result. - DONE
- Scheduled test execution. Continiuous testing configuration. - DONE
- Bitcoin + DeFi Smartcontract based accounting and payment system. - TESTING
- Account management for KYC/AML regulatory compliance - TESTING
- Ipfs Reporting and report mangement API - INPROGRESS
- Selenium integratiion for browser Testing - INPROGRESS
- SSH Reverse tunnelling for localhost testing.
- GPT code generation from BDD, and self verification. - INPROGRESS
- Test Management REST API interface
- Secrets management and variable templatization
- Metrics Dashboard
- Alerting and notifications
- Managed test runners 
- Appium integration for mobile ecosystem support.
- BDD scenario generation from voice input fed to Generative AIs.
- Generative AI code modification based on features.
- Zero Knowledge Proof based contracts to validate tests and approve payouts.
- "Super Step" user defined high level abstractions
  
* Target User Roles  

Benefits to organizational roles through the aid of the DamageBDD platform.

| Role            | Use Case                                                                       |
|-----------------+--------------------------------------------------------------------------------|
| End User        | initial requirements, feature requests, defect reporting                       |
| Product Support | feature requests, isolating defect behaviours, edge cases, monitoring, alerting|
| QA              | define expected behaviors, continuous monitoring, reporting, alerts            |
| Infra           | availability monitoring, endpoint latency reporting, alerts,                   |
| Development     | prototyping, maintenance, verification, continous monitoring                   |
| Management      | project velocity, current progress, performance metrics, fund allocation     |
|                 |                                                                                |

* Use Cases

Below are only scratching the surface of possibilities that can be
covered using BDD workflow on DamageBDD.

- Web2 application server and browser performance, quality and availability
- Web3 Smartcontract continuous auditing.
- Infrastructure availability expectation management.
- General Process Execution orchestration through custom Step implementations.
- General Behaviour verification based on custom input sources.

* References

- [[https://medium.com/coinmonks/design-of-smart-contracts-using-bdd-and-cucumber-4533162fc235][Design of Smart contracts using BDD and Cucumber]]
- [[https://youtu.be/T70txXsSxig][Better Smart Contracts with Behavior-Driven Development]]
- [[https://github.com/jagguli/DamageBDD][DamageBDD Repo]]
- [[https://www.linkedin.com/company/damagebdd/][DamageBDD Linkedin Page]]

  
